{"version":3,"sources":["services.js","sort.js","Header/Header.jsx","Login/Login.jsx","Task/Task.jsx","Selector/Selector.jsx","Main/Main.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["add","username","task","content","status","fetch","method","headers","Headers","body","JSON","stringify","catch","convertNetworkError","then","response","ok","json","convertServiceError","e","code","Promise","reject","deleteTask","taskId","fetchLogin","fetchStatus","logout","fetchTasks","update","sortMethod","tasks","keya","keyb","compareMethod","finished","filtered","Object","keys","sort","key1","key2","forEach","key","todo","increase","decrease","Header","theme","setThemeState","onClick","value","className","services","require","Login","onLogin","setErr","useState","setUsername","placeholder","onChange","target","preventDefault","res","message","Item","id","editingTaskId","setEditingTaskId","onUpdate","editingTaskContent","setEditingTaskContent","onDelete","taskContentState","setTaskContentState","event","onKeyPress","toLowerCase","newTask","stopPropagation","Selector","handleSort","name","Main","onLogout","tasksState","setTasksState","sortState","setSortState","setNewTask","useEffect","data","sortByType","handleAdd","handleDelete","deletedId","handleUpdate","err","type","listContent","length","map","nodeName","App","isLoggedIn","userState","setUserState","themeState","main","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.7978e83f.chunk.js","sourcesContent":["export const add = ({username, task}) => {\r\n  const URL = '/tasks/' + username;\r\n  task = {content: task, status:false}\r\n  return fetch(URL, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n    'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify( {task} ),\r\n  })\r\n    .catch(convertNetworkError)\r\n    .then(response => {\r\n    if (!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n    })\r\n}\r\n\r\nconst convertNetworkError = (e) => {\r\n  return { code: 'NETWORK-ERROR', e };\r\n};\r\n  \r\nconst convertServiceError = (e) => Promise.reject(e);\r\n\r\nexport const deleteTask = ({username, taskId}) => {\r\n  const URL = '/tasks/' + username + '/' + taskId;\r\n  return fetch(URL, {\r\n    method: 'DELETE',\r\n  })\r\n    .catch(convertNetworkError)\r\n    .then(response => {\r\n    if (!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n    })\r\n}\r\n\r\nexport const fetchLogin = (username) => {\r\n  return fetch('/session', {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n    'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({ username }),\r\n  })\r\n    .catch(convertNetworkError)\r\n    .then(response => {\r\n    if (!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n    });\r\n};\r\n\r\nexport const fetchStatus = () => {\r\n  return fetch('/session', {\r\n  method: 'GET',\r\n  })\r\n  .catch(convertNetworkError)\r\n  .then(response => {\r\n    if (!response.ok) {\r\n    return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const logout = () => {\r\n  return fetch('/session', {\r\n  method: 'DELETE',\r\n  })\r\n  .catch(convertNetworkError)\r\n  .then(response => {\r\n    return response.ok;\r\n  });\r\n};\r\n\r\nexport const fetchTasks = (username) => {\r\n  const URL = '/tasks/' + username;\r\n  return fetch(URL, {\r\n  method: 'GET',\r\n  })\r\n  .catch(convertNetworkError)\r\n  .then(response => {\r\n    if (!response.ok) {\r\n    return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  })\r\n}\r\n\r\nexport const update = ({username, taskId, task}) => {\r\n  const URL = '/tasks/' + username + '/' + taskId;\r\n  return fetch(URL, {\r\n  method: 'PUT',\r\n  headers: new Headers({\r\n    'content-type': 'application/json',\r\n  }),\r\n  body: JSON.stringify( {task} ),\r\n  })\r\n  .catch(convertNetworkError)\r\n  .then(response => {\r\n    if (!response.ok) {\r\n    return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  })\r\n}\r\n","const sortMethod = (tasks, keya, keyb) => {\r\n  if (tasks[keya].status === tasks[keyb].status) {\r\n    return tasks[keya].content < tasks[keyb].content ? -1 : 1;\r\n  }\r\n  return tasks[keya].status ? -1 : (tasks[keyb].status ? 1 : -1);\r\n}\r\n\r\nconst compareMethod = (tasks, keya, keyb) => {\r\n  return tasks[keya].content < tasks[keyb].content ? -1 : 1;\r\n}\r\n\r\nexport function finished(tasks) {\r\n  const filtered = {}\r\n  Object.keys(tasks).sort((key1, key2) => {\r\n    return sortMethod(tasks, key1, key2);\r\n  }).forEach((key) => filtered[key] = tasks[key]);\r\n  return filtered;\r\n}\r\n\r\nexport function todo(tasks) {\r\n  const filtered = {}\r\n  Object.keys(tasks).sort((key2, key1) => {\r\n    return sortMethod(tasks, key1, key2);\r\n  }).forEach((key) => filtered[key] = tasks[key]);\r\n  return filtered;\r\n}\r\n\r\nexport function increase(tasks) {\r\n  const filtered = {};\r\n  Object.keys(tasks).sort((key1, key2) => {\r\n    return compareMethod(tasks,key1, key2);\r\n  }).forEach((key) => filtered[key] = tasks[key]);\r\n  return filtered;\r\n}\r\n\r\nexport function decrease(tasks) {\r\n  const filtered = {};\r\n  Object.keys(tasks).sort((key2, key1) => {\r\n    return compareMethod(tasks, key1, key2);\r\n  }).forEach((key) => filtered[key] = tasks[key]);\r\n  return filtered;\r\n}","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nexport default function Header({ theme, setThemeState }) {\r\nreturn (\r\n  <header>\r\n    <button onClick={setThemeState} value='light' className={theme === 'light' ? 'selected' : ''}> Light </button>\r\n    <button onClick={setThemeState} value='colorful' className={theme === 'colorful' ? 'selected' : ''}> Colorful </button>\r\n    <button onClick={setThemeState} value='dark' className={theme === 'dark' ? 'selected' : ''}> Dark </button>\r\n  </header>\r\n)\r\n}\r\n","import React, { useState } from 'react';\r\n \r\nimport './Login.css';\r\n\r\nconst services = require('../services');\r\n\r\nexport default function Login({ onLogin, setErr }) {\r\n\r\n  const[ username, setUsername ] = useState('');\r\n  \r\n  const handleInput = (e) => {\r\n    setUsername(e.target.value);\r\n  }\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    services.fetchLogin(username)\r\n      .then(res => {\r\n        onLogin(username);\r\n      })\r\n      .catch((e) => {\r\n        setErr(e.message)\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className='login'>\r\n      <input placeholder='user name' onChange={handleInput} value={username}/>\r\n      <button onClick={handleLogin}> Sign In </button>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\n\r\nimport './Task.css';\r\n\r\nexport default function Item({ id, task, editingTaskId, setEditingTaskId, onUpdate, editingTaskContent,\r\n  setEditingTaskContent, onDelete}) {\r\n\r\n  const [taskContentState, setTaskContentState] = useState(task.content);\r\n\r\n  function handleClick(e) {\r\n    e.stopPropagation();\r\n    \r\n    if (editingTaskId && editingTaskId !== id) {\r\n      const newTask = { content: editingTaskContent, status:task.status }\r\n      onUpdate(editingTaskId, newTask);\r\n    }\r\n    \r\n    setEditingTaskId(id);\r\n    setEditingTaskContent(taskContentState);\r\n  }\r\n  \r\n  function handleDelete() {\r\n    onDelete(id);\r\n  }\r\n  \r\n  function handleEnter(e) {\r\n    if (e.key.toLowerCase() === 'enter') {\r\n      const newTask = {content: taskContentState, status:task.status}\r\n      onUpdate(editingTaskId, {task: newTask});\r\n    }\r\n  }\r\n\r\n  function toggle() {\r\n    const newTask = {content: taskContentState, status:!task.status}\r\n    onUpdate(id, newTask);\r\n  }\r\n  \r\n  function onModify(event) {\r\n    setTaskContentState(event.target.value);\r\n    setEditingTaskContent(event.target.value);\r\n  }\r\n  \r\n  const content = editingTaskId === id\r\n  ? <input value={taskContentState} onChange={onModify} onKeyPress={handleEnter}/>\r\n  : <span onClick={handleClick}>{task.content}</span>\r\n  ;\r\n  \r\n  return (\r\n    <li className={task.status ? 'done' : ''}>\r\n      {content}\r\n      <button onClick={toggle} className={(task.status ? 'done' : 'redo')}>{task.status ? 'Done' : 'ToDo'}</button>\r\n      <button onClick={handleDelete} className='delete'> Delete </button>\r\n    </li>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport './Selector.css';\r\n\r\nexport default function Selector({handleSort}) {\r\n  return (\r\n    <div>\r\n      <h1>Filter:</h1>\r\n      <select name=\"sort\" onChange={handleSort}>\r\n        <option value=\"increase\"> Ascending </option>\r\n        <option value=\"decrease\"> Descending </option>\r\n        <option value=\"finished\"> Done first </option>\r\n        <option value=\"todo\"> Not Done first </option>\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n","import React,  { useState, useEffect } from 'react';\r\n\r\nimport Task from '../Task/Task';\r\nimport Selector from '../Selector/Selector';\r\n\r\nimport './Main.css';\r\n\r\nconst services = require('../services');\r\nconst sort = require('../sort');\r\n\r\nexport default function Main({onLogout, username, theme, setErr}) {\r\n\r\n  const [tasksState, setTasksState] = useState({});\r\n  const [editingTaskId, setEditingTaskId] = useState(null);\r\n  const [editingTaskContent, setEditingTaskContent] = useState('');\r\n  const [sortState, setSortState] = useState('increase');\r\n  const [newTask, setNewTask] = useState('');\r\n\r\n  useEffect(() => {\r\n    services.fetchTasks(username)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setTasksState(res.data);\r\n          sortByType(sortState);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setErr(e.message)\r\n      });\r\n  }, []);\r\n\r\n  const handleAdd = () => {\r\n    if (!newTask) {\r\n      setErr('Task content needed');\r\n      return;\r\n    }\r\n    services.add({ username, task: newTask })\r\n      .catch((e) => {\r\n        setErr(e.message)\r\n      })\r\n      .then((res) => {\r\n        if (res.data && res.data.taskId) {\r\n          setTasksState({ ...tasksState, [res.data.taskId]: res.data });\r\n          setNewTask('');\r\n          setErr('');\r\n        }\r\n      })\r\n      .catch(e => setErr(e.message));\r\n  }\r\n\r\n  function handleDelete(id) {\r\n    services.deleteTask({ username, taskId: id })\r\n      .then((res) => {\r\n        const deletedId = res.data.taskId;\r\n        delete tasksState[deletedId];\r\n        setTasksState({ ...tasksState });\r\n      })\r\n      .catch(e => setErr(e.message));\r\n  }\r\n\r\n  function toggleEditing(e) {\r\n    e.stopPropagation();\r\n    if (e.target.nodeName.toLowerCase() !== 'input') {\r\n      if (editingTaskId) {\r\n        const task = { ...tasksState[editingTaskId], content: editingTaskContent }\r\n        handleUpdate(editingTaskId, task);\r\n        setEditingTaskId(null);\r\n        setErr('');\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleUpdate(editingTaskId, task) {\r\n    const taskId = editingTaskId;\r\n    services.update({ username, taskId, task })\r\n      .catch((err) => {\r\n        setErr(err.message)\r\n      })\r\n      .then((res) => {\r\n        setTasksState({ ...tasksState, [res.data.taskId]: res.data });\r\n        setErr('');\r\n      });\r\n  }\r\n\r\n  function handleSort(e) {\r\n    setSortState(e.target.value);\r\n    sortByType(e.target.value);\r\n  }\r\n\r\n  function sortByType(type) {\r\n    switch (type) {\r\n      case 'increase':\r\n        setTasksState(sort.increase(tasksState));\r\n        break;\r\n      case 'decrease':\r\n        setTasksState(sort.decrease(tasksState));\r\n        break;\r\n      case 'finished':\r\n        setTasksState(sort.finished(tasksState));\r\n        break;\r\n      default :\r\n        setTasksState(sort.todo(tasksState));\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n  function handlePress(e) {\r\n    if (e.key.toLowerCase() === 'enter') {\r\n      handleAdd();\r\n    }\r\n  }\r\n\r\n  function handleLogout() {\r\n    services.logout()\r\n      .then(() => {\r\n        onLogout();\r\n        setErr('');\r\n      })\r\n  }\r\n\r\n  function reset() {\r\n    services.fetchTasks(username)\r\n      .then((res) => {\r\n        if (res.data) {\r\n          setTasksState(res.data);\r\n          sortByType(sortState);\r\n        }\r\n      });\r\n  }\r\n  \r\n  const listContent = Object.keys(tasksState).length === 0\r\n    ? ''\r\n    : <ul>\r\n        {Object.keys(tasksState).map((key) =>\r\n          <Task\r\n          key={key}\r\n          id={key}\r\n          task={tasksState[key]}\r\n          editingTaskId={editingTaskId}\r\n          setEditingTaskId={setEditingTaskId}\r\n          onUpdate={handleUpdate}\r\n          editingTaskContent={editingTaskContent}\r\n          setEditingTaskContent={setEditingTaskContent}\r\n          onDelete={handleDelete} />\r\n        )}\r\n      </ul>\r\n    ;\r\n\r\n  return (\r\n    <div onClick={toggleEditing} className=\"main\">\r\n      <Selector handleSort={handleSort} theme={theme}/>\r\n      {listContent}\r\n      <div className=\"user-input\">\r\n        <input className={theme} onChange={(e) => setNewTask(e.target.value)} value={newTask} onKeyPress={handlePress}/>\r\n        <button onClick={handleAdd}> Add Task </button>\r\n      </div>\r\n      <div className=\"user-info\">\r\n        <button onClick={reset}> Refresh List</button>\r\n        <button onClick={handleLogout}> Log Out </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport Header from '../Header/Header';\r\nimport Login from '../Login/Login';\r\nimport Main from '../Main/Main';\r\n\r\nimport './App.css';\r\n\r\nconst services = require('../services');\r\n\r\nexport default function App() {\r\n  \r\n  const [userState, setUserState] = useState({isLoggedIn: false});\r\n  const [themeState, setThemeState] = useState('colorful');\r\n  const [err, setErr] = useState('');\r\n\r\n  useEffect(() => {\r\n    services.fetchStatus()\r\n      .then(data => {\r\n        setUserState({\r\n          isLoggedIn: true,\r\n          username: data.username,\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  function handleSetTheme(e) {\r\n    setThemeState(e.target.value)\r\n  }\r\n\r\n  const login = (username) => {\r\n    setUserState({\r\n      isLoggedIn: true,\r\n      username: username,\r\n    })\r\n  }\r\n\r\n  const logout = () => {\r\n    setUserState({\r\n      isLoggedIn: false,\r\n    })\r\n  }\r\n\r\n  const main = userState.username\r\n    ? <Main onLogout={logout} username={userState.username} theme={themeState} err={err} setErr={setErr}/>\r\n    : <Login onLogin={login} theme={themeState} err={err} setErr={setErr}/>;\r\n    \r\n  return (\r\n    <div>\r\n      <Header theme={themeState} setThemeState={handleSetTheme}/>\r\n      <div className={'container ' + themeState}>\r\n        <h1> {err} </h1>\r\n        {main}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}